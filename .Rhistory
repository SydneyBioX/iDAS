setwd("/dskh/nobackup/lijiay/Usyd-headneck/20230911-miloR-LY/src")
setwd("/dskh/nobackup/lijiay/Usyd-headneck/20230911-miloR-LY/src/dario")
suppressPackageStartupMessages({
library(miloR)
library(Seurat)
library(SingleCellExperiment)
library(dplyr)
library(ggplot2)
library(scran)
library(scater)
library(gridExtra)
library(patchwork)
library(pheatmap)
library(UpSetR)
library(wesanderson)
library(knitr)
})
knitr::opts_chunk$set(cache = FALSE, warning = FALSE,
message = FALSE, cache.lazy = FALSE)
doLimma <- function (exprsMat, cellTypes, exprs_pct = 0.05)
{
cellTypes <- droplevels(as.factor(cellTypes))
tt <- list()
for (i in seq_len(nlevels(cellTypes))) {
print(i)
tmp_celltype <- (ifelse(cellTypes == levels(cellTypes)[i],
1, 0))
design <- stats::model.matrix(~tmp_celltype)
meanExprs <- do.call(cbind, lapply(c(0, 1), function(i) {
Matrix::rowMeans(exprsMat[, tmp_celltype == i, drop = FALSE])
}))
meanPct <- do.call(cbind, lapply(c(0, 1), function(i) {
Matrix::rowSums(exprsMat[, tmp_celltype == i, drop = FALSE] >
0)/sum(tmp_celltype == i)
}))
keep <- meanPct[, 2] > exprs_pct
y <- methods::new("EList")
y$E <- exprsMat[keep, ]
fit <- limma::lmFit(y, design = design)
fit <- limma::eBayes(fit, trend = TRUE, robust = TRUE)
tt[[i]] <- limma::topTable(fit, n = Inf, adjust.method = "BH",
coef = 2)
if (!is.null(tt[[i]]$ID)) {
tt[[i]] <- tt[[i]][!duplicated(tt[[i]]$ID), ]
rownames(tt[[i]]) <- tt[[i]]$ID
}
tt[[i]]$meanExprs.1 <- meanExprs[rownames(tt[[i]]), 1]
tt[[i]]$meanExprs.2 <- meanExprs[rownames(tt[[i]]), 2]
tt[[i]]$meanPct.1 <- meanPct[rownames(tt[[i]]), 1]
tt[[i]]$meanPct.2 <- meanPct[rownames(tt[[i]]), 2]
}
names(tt) <- levels(cellTypes)
return(tt)
}
load("../../in/allHumanCancerFibro.RData")
allHumanCancer <- allHumanCancer[, !allHumanCancer$Sample %in% c("OSCC_16-P_rep2", "OSCC_16-M_rep2")] # Exclude technical replicates.
allHumanCancer <- allHumanCancer[, !allHumanCancer$seurat_clusters %in% 16]
allHumanCancer$Sample <- droplevels(allHumanCancer$Sample)
allHumanCancer$seurat_clusters <- droplevels(allHumanCancer$seurat_clusters)
MILOdata <- Milo(allHumanCancer)
reducedDim(MILOdata, "UMAP") <- reducedDim(allHumanCancer, "UMAP")
MILOdata <- buildGraph(MILOdata)
MILOdata <- makeNhoods(MILOdata, refinement_scheme = "graph")
MILOdata <- buildNhoodGraph(MILOdata)
MILOdata <- countCells(MILOdata, meta.data = colData(MILOdata), samples = "Sample")
design <- data.frame(colData(MILOdata))[, c("Sample", "Smoker")]
design <- distinct(design)
rownames(design) <- design$Sample
## Reorder rownames to match columns of nhoodCounts(milo).
design <- design[colnames(nhoodCounts(MILOdata)), , drop = FALSE]
smokerResults <- testNhoods(MILOdata, design = ~ Smoker, design.df = design[!is.na(design$Smoker), ], fdr.weighting = "graph-overlap")
MILOdata <- buildNhoodGraph(MILOdata)
smokerResults <- groupNhoods(MILOdata, smokerResults)
smokerResults <- annotateNhoods(MILOdata, smokerResults, coldata_col = "Sample")
smokerResults <- annotateNhoods(MILOdata, smokerResults, coldata_col = "seurat_clusters")
pheno_pl <- plotReducedDim(MILOdata, dimred = "UMAP", by_exprs_values="merged",
colour_by="Smoker", text_by = "cellType",
text_size = 3, point_size=0.5) +
guides(fill="none")
## Plot neighbourhood graph
nh_graph_pl <- plotNhoodGraphDA(MILOdata, smokerResults,
by_exprs_values="merged",layout="UMAP",alpha=0.1)
sample_pl=plotReducedDim(MILOdata, dimred = "UMAP", by_exprs_values="merged",
colour_by="Sample", #text_by = "Smoker",
text_size = 3, point_size=0.5) +
guides(fill="none")
celltype_pl=plotReducedDim(MILOdata, dimred = "UMAP", by_exprs_values="merged",
colour_by="seurat_clusters", #text_by = "Young",
text_size = 3, point_size=0.5) +
guides(fill="none")
# pheno_pl + nh_graph_pl + plot_layout(guides="collect")+ggtitle("Smoking")
# sample_pl + celltype_pl + plot_layout(guides="collect")+ggtitle("Smoking")
smokerResults$NhoodGroup=as.character(smokerResults$NhoodGroup)
nh_autograph_pl=plotNhoodGroups(MILOdata, smokerResults, layout="UMAP")
plot.list=list(sample_pl,celltype_pl,pheno_pl,nh_graph_pl,nh_autograph_pl)
names(plot.list)=c("Sample","seurat_clusters","Phenotype","Neighbourhoods","AutoGrouping")
x=MILOdata
da.res=smokerResults[smokerResults$FDR<=0.1&abs(smokerResults$logFC)>4,]
nhs.da.gr <- da.res$NhoodGroup
names(nhs.da.gr) <- da.res$Nhood
nhood.gr <- unique(nhs.da.gr)
nhs <- nhoods(x)[,as.integer(row.names(da.res))]
fake.meta <- data.frame(CellID = colnames(x)[rowSums(nhs) >
0], Nhood.Group = rep(NA, sum(rowSums(nhs) > 0)))
rownames(fake.meta) <- fake.meta$CellID
for (i in seq_along(nhood.gr)) {
nhood.x <- which(nhs.da.gr == nhood.gr[i])
nhs <- nhs[rowSums(nhs) > 0, ]
nhood.gr.cells <- rowSums(nhs[, nhood.x, drop = FALSE]) >
0
fake.meta[nhood.gr.cells, "Nhood.Group"] <- ifelse(is.na(fake.meta[nhood.gr.cells,
"Nhood.Group"]), nhood.gr[i], NA)
}
fake.meta <- fake.meta[!is.na(fake.meta$Nhood.Group), ]
subset=MILOdata[,fake.meta$CellID]
tab.list=list(table(fake.meta$Nhood.Group,subset@colData$Sample),
table(fake.meta$Nhood.Group,subset@colData$seurat_clusters))
names(tab.list)=c("Group vs Sample","Group vs seurat_clusters")
tab.list[[1]]
subset@nhoods
fake.meta$Nhood.Group
table(fake.meta$Nhood.Group,subset@colData$Sample)
iDAS=function(Z,f1,f2,random=NULL,test_func="lm",
Sig_cutoff=0.02, Sig = 0.05,Int= 0.01, F1 = 0.01,F2 = 0.01,
adj_method="BH",f1name=NULL,f2name=NULL,randomname=NULL){
# random=g
P_mat <- matrix(NA, nrow = ncol(Z), ncol = 5)
if(test_func=="lm"&is.null(random)){
factor_tmp=check_factor_name(f1name,f2name,randomname,f1,f2,random)
lm_full <- paste("Y~(", factor_tmp$f1_tmp, ")*(", factor_tmp$f2_tmp, ")",
sep = "")
lm_int_alt <- paste("Y~(", factor_tmp$f1_tmp, "):(", factor_tmp$f2_tmp, ")",
sep = "")
lm_int_null <- paste("Y~(", factor_tmp$f1_tmp, ")+(", factor_tmp$f2_tmp,
")", sep = "")
lm_f1 <- paste("Y~(", factor_tmp$f1_tmp, ")", sep = "")
lm_f2 <- paste("Y~(", factor_tmp$f2_tmp, ")", sep = "")
}else if(test_func=="lmer"&(!is.null(random))){
factor_tmp=check_factor_name(f1name,f2name,randomname,f1,f2,random)
lm_full <- paste("Y~(",  factor_tmp$f1_tmp, ")*(", factor_tmp$f2_tmp,
")+(1|",factor_tmp$random_tmp,")", sep = "")
lm_int_alt <- paste("Y~(",  factor_tmp$f1_tmp, "):(", factor_tmp$f2_tmp,
")+(1|",factor_tmp$random_tmp,")", sep = "")
lm_int_null <- paste("Y~(",  factor_tmp$f1_tmp, ")+(", factor_tmp$f2_tmp,
")+(1|",factor_tmp$random_tmp,")",sep = "")
lm_f1 <- paste("Y~(",  factor_tmp$f1_tmp, ")+(1|",
factor_tmp$random_tmp,")",sep = "")
lm_f2 <- paste("Y~(", factor_tmp$f2_tmp, ")+(1|",
factor_tmp$random_tmp,")", sep = "")
}else{
print("wrong!")
}
lm_formula=c("full" = lm_full, "int_null" = lm_int_null,
"int_alt" = lm_int_alt,
"f1" = lm_f1, "f2" = lm_f2)
p_sig <- c()
sig_level=list()
if(test_func=="lm"&is.null(random)){
calc0 <- "Y~1"
func=get("lm")
calc1 <- lm_formula[1]
}else{
calc0 <- "Y~1+(1|random)"
func=get("lmer")
calc1 <- lm_formula[1]
}
for (i in 1:ncol(Z)) {
if(test_func=="lm"&is.null(random)){
dat <- data.frame(Y = Z[, i], f1, f2)
M0 <- func(formula(calc0), data = dat)
M1 <- func(formula(calc1), data = dat)
anova_res <- anova(M0, M1, test = "F")
p <- anova_res[2,ncol(anova_res)]
}else{
dat <- data.frame(Y = Z[, i], f1, f2,random)
M0 <- func(formula(calc0), data = dat)
M1 <- func(formula(calc1), data = dat)
anova_res <- anova(M0, M1, test = "F",refit=FALSE)
p <- anova_res[2,ncol(anova_res)]
}
p_sig[i] <-p
}
if (is.null(adj_method)) {
p_sig_adj <- p_sig
}else {
p_sig_adj <- p.adjust(p_sig, method = adj_method)
}
P_mat[, 1] <- p_sig_adj
cls <- rep("sig", ncol(Z))
if(!is.null(Sig_cutoff)){
cutoff=sort(p_sig_adj)[length(p_sig_adj)*Sig_cutoff] # adjusted p value 1 problem
cls[p_sig_adj > cutoff] <- "non-sig"
cls_df <- data.frame(Sig0 = cls)
idx_sig <- which(cls=="sig")
if(length(idx_sig)>1){
Z_tmp <- Z[, idx_sig]
}else{
Z_tmp <- data.frame(Z[, idx_sig] )
colnames(Z_tmp)=colnames(Z)[idx_sig]
rownames(Z_tmp)=rownames(Z)
}
}else if(Sig){
cls[p_sig_adj > Sig] <- "non-sig"
cls_df <- data.frame(Sig0 = cls)
idx_sig <- which(cls=="sig")
if(length(idx_sig)>1){
Z_tmp <- Z[, idx_sig]
}else{
Z_tmp <- data.frame(Z[, idx_sig] )
colnames(Z_tmp)=colnames(Z)[idx_sig]
rownames(Z_tmp)=rownames(Z)
}
}
p_int_tmp <- rep(NA, ncol(Z_tmp))
p_f1_tmp <- rep(NA, ncol(Z_tmp))
p_f2_tmp <- rep(NA, ncol(Z_tmp))
for (i in 1:ncol(Z_tmp)) {
if(test_func=="lm"&is.null(random)){
calc0 <- lm_formula["int_null"]
calc1 <- lm_formula["full"]
dat <- data.frame(Y = Z_tmp[, i], f1, f2)
M0 <- func(formula(calc0), data = dat)
M1 <- func(formula(calc1), data = dat)
anova_res <- anova(M0, M1, test = "F")
p <- anova_res[2,ncol(anova_res)]
}else{
calc0 <- lm_formula["int_null"]
calc1 <- lm_formula["full"]
dat <- data.frame(Y = Z_tmp[, i], f1, f2,random)
M0 <- func(formula(calc0), data = dat)
M1 <- func(formula(calc1), data = dat)
anova_res <- anova(M0, M1, test = "F",refit=FALSE)
p <- anova_res[2,ncol(anova_res)]
}
p_int_tmp[i] <- p
if(test_func=="lm"&is.null(random)){
calc0 <- lm_formula["f2"]
calc1 <- lm_formula["int_null"]
dat <- data.frame(Y = Z_tmp[, i], f1, f2)
M0 <- func(formula(calc0), data = dat)
M1 <- func(formula(calc1), data = dat)
anova_res <- anova(M0, M1, test = "F")
p <- anova_res[2,ncol(anova_res)]
}else{
calc0 <- lm_formula["f2"]
calc1 <- lm_formula["int_null"]
dat <- data.frame(Y = Z_tmp[, i], f1, f2,random)
M0 <- func(formula(calc0), data = dat)
M1 <- func(formula(calc1), data = dat)
anova_res <- anova(M0, M1, test = "F",refit=FALSE)
p <- anova_res[2,ncol(anova_res)]
}
p_f1_tmp[i] <- p
if(test_func=="lm"&is.null(random)){
calc0 <- lm_formula["f1"]
calc1 <- lm_formula["int_null"]
dat <- data.frame(Y = Z_tmp[, i], f1, f2)
M0 <- func(formula(calc0), data = dat)
M1 <- func(formula(calc1), data = dat)
anova_res <- anova(M0, M1, test = "F")
p <- anova_res[2,ncol(anova_res)]
}else{
calc0 <- lm_formula["f1"]
calc1 <- lm_formula["int_null"]
dat <- data.frame(Y = Z_tmp[, i], f1, f2,random)
M0 <- func(formula(calc0), data = dat)
M1 <- func(formula(calc1), data = dat)
anova_res <- anova(M0, M1, test = "F",refit=FALSE)
p <- anova_res[2,ncol(anova_res)]
}
p_f2_tmp[i] <- p
}
if (is.null(adj_method)) {
P_mat[idx_sig, 3] = p_int_tmp
P_mat[idx_sig, 4] = p_f1_tmp
P_mat[idx_sig, 5] = p_f2_tmp
}else {
P_mat[idx_sig, 3] = p.adjust(p_int_tmp,method = adj_method)
P_mat[idx_sig, 4] = p.adjust(p_f1_tmp,method = adj_method)
P_mat[idx_sig, 5] = p.adjust(p_f2_tmp,method = adj_method)
}
cls_int_tmp <- rep("Add", ncol(Z_tmp))
cls_int_tmp[p_int_tmp < Int] = "Int"
names(cls_int_tmp) <- colnames(Z_tmp)
cls_tmp <- rep(NA, ncol(Z))
idx_add <- which(cls_int_tmp == "Add")
cls_tmp1 <- cls_int_tmp[idx_add]
p_f2_tmp1 <- p_f2_tmp[idx_add]
p_f1_tmp1 <- p_f1_tmp[idx_add]
cls_tmp1[(p_f2_tmp1 <= F2) & (p_f1_tmp1 > F1)] = "F2"
cls_tmp1[(p_f2_tmp1 >F2) & (p_f1_tmp1 <= F1)] = "F1"
cls_int_tmp[idx_add] <- cls_tmp1
cls_tmp[idx_sig] <- cls_int_tmp
cls_df$Sig1 <- cls_tmp
cls_df$varname <- colnames(Z)
colnames(P_mat) <- c("Sig", "Linear", "Interaction", "F1",
"F2")
rownames(P_mat) <- colnames(Z)
rownames(cls_df) <- colnames(Z)
return(list(P_mat=P_mat,cls_df=cls_df))
}
check_factor_name=function(f1name,f2name,randomname,f1,f2,random){
if (is.null(f1name)) {
f1name = "f1"
}
if (is.null(f2name)) {
f2name = "f2"
}
if (is.null(randomname)) {
randomname = "random"
}
if (is.factor(f1)) {
f1 <- data.frame(f1)
colnames(f1) <- f1name
}else if (is.vector(f1)) {
f1 <- data.frame(f1)
colnames(f1) <- f1name
}
f1name <- colnames(f1)
if (is.factor(f2)) {
f2 <- data.frame(f2)
colnames(f2) <- f2name
}else if (is.vector(f2)) {
f2 <- data.frame(f2)
colnames(f2) <- f2name
}
f2name <- colnames(f2)
if(is.null(random)){
random=NULL
}else{
if (is.factor(random)) {
random <- data.frame(random)
colnames(random) <- randomname
}else if (is.vector(random)) {
random <- data.frame(random)
colnames(random) <- randomname
}
}
randomname=colnames(random)
if (length(f1name) > 1) {
f1_tmp <- paste(f1name, collapse = "+")
}else {
f1_tmp <- f1name
}
if (length(f2name) > 1) {
f2_tmp <- paste(f2name, collapse = "+")
}else {
f2_tmp <- f2name
}
if (length(randomname) > 1) {
random_tmp <- paste(randomname, collapse = "+")
}else {
random_tmp <- randomname
}
return(list(f1_tmp=f1_tmp,f2_tmp=f2_tmp,random_tmp=random_tmp,f1=f1,f2=f2,random=random))
}
Z=subset@assays@data$merged
Z[1:2,1:2]
subset@colData@metadata
subset@colData
Z=t(subset@assays@data$merged)
psmoker=subset@colData[,"Snoker"]
subset@colData
psmoker=subset@colData[,"Smoker"]
pCisplatin==subset@colData[,"Cisplati"]
pCisplatin==subset@colData[,"Cisplatin"]
pCisplatin=subset@colData[,"Cisplatin"]
length(pCisplatin)
dim(Z)
outcome=iDAS(Z=Z,f1=psmoker,f2=pCisplatin,random=NULL,test_func="lm",
Sig_cutoff=0.02, Sig = 0.05,Int= 0.01, F1 = 0.01,F2 = 0.01,
adj_method="BH",f1name=NULL,f2name=NULL,randomname=NULL)
outcome
table(outcome$cls_df$Sig1)
dim(Z)
setwd("/dskh/nobackup/lijiay/Usyd-headneck/20230911-miloR-LY/src")
setwd("/dskh/nobackup/lijiay/Usyd-headneck/20230911-miloR-LY/src/dario")
